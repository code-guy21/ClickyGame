{"version":3,"sources":["components/NavBar/index.js","components/utils/Images.js","components/ImageGrid/index.js","components/Main/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","score","topScore","className","href","data","id","url","process","copy","i","length","rand","Math","floor","random","temp","split","push","splice","ImageGrid","updateScore","Images","map","row","key","col","style","height","backgroundImage","backgroundSize","onClick","Main","Footer","App","state","clicked","handleClick","setState","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.581aac0c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = ({ score, topScore }) => {\n  return (\n    <>\n      <nav className=\"navbar navbar-light bg-light \">\n        <div className=\"col-md-4 text-center\">\n          <a className=\"navbar-brand\" href=\"/\">\n            Clicky Game\n          </a>\n        </div>\n        <div className=\"col-md-4 text-center\">Click an image to begin!</div>\n        <div className=\"col-md-4 text-center\">\n          Score: {score} | Top Score: {topScore}\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","const data = [\n  { id: 1, url: `${process.env.PUBLIC_URL}/assets/images/bmo.png` },\n  { id: 2, url: `${process.env.PUBLIC_URL}/assets/images/finn.png` },\n  { id: 3, url: `${process.env.PUBLIC_URL}/assets/images/iceking.jpg` },\n  { id: 4, url: `${process.env.PUBLIC_URL}/assets/images/jake.png` },\n  { id: 5, url: `${process.env.PUBLIC_URL}/assets/images/lumpy.png` },\n  { id: 6, url: `${process.env.PUBLIC_URL}/assets/images/marceline.jpg` },\n  { id: 7, url: `${process.env.PUBLIC_URL}/assets/images/princess.png` },\n  { id: 8, url: `${process.env.PUBLIC_URL}/assets/images/treetrunks.jpg` },\n  { id: 9, url: `${process.env.PUBLIC_URL}/assets/images/flame.jpg` },\n  { id: 10, url: `${process.env.PUBLIC_URL}/assets/images/prismo.png` },\n  { id: 11, url: `${process.env.PUBLIC_URL}/assets/images/peppermint.jpg` },\n  { id: 12, url: `${process.env.PUBLIC_URL}/assets/images/gunter.jpg` },\n];\n\nexport default {\n  shuffle: () => {\n    let copy = [...data];\n\n    for (let i = copy.length - 1; i > 0; i--) {\n      let rand = Math.floor(Math.random() * (i - 1));\n\n      let temp = copy[rand];\n      copy[rand] = copy[i];\n      copy[i] = temp;\n    }\n    let split = [];\n\n    while (copy.length) {\n      split.push(copy.splice(0, 3));\n    }\n\n    return split;\n  },\n};\n","import React from \"react\";\nimport Images from \"../utils/Images\";\n\nconst ImageGrid = ({ updateScore }) => {\n  return (\n    <>\n      {Images.shuffle().map((row, i) => {\n        return (\n          <div key={i} className=\"row\">\n            {row.map((col, i) => {\n              return (\n                <div\n                  key={i}\n                  className=\" col-md-4 p-2\"\n                  style={{ height: \"230px\" }}\n                >\n                  <button\n                    className=\"btn w-100\"\n                    style={{\n                      height: \"100%\",\n                      backgroundImage: `url(${col.url})`,\n                      backgroundSize: \"cover\",\n                    }}\n                    onClick={() => updateScore(col.id)}\n                  ></button>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default ImageGrid;\n","import React from \"react\";\nimport ImageGrid from \"../ImageGrid\";\n\nconst Main = ({ updateScore }) => {\n  return (\n    <div className=\"flex-fill\">\n      <div className=\"col12\">\n        <div className=\"jumbotron text-center m-0\">\n          <h1 className=\"display-4\">Clicky Game!</h1>\n          <p className=\"lead\">\n            Click on an image to earn points, but don't click on any more than\n            once!\n          </p>\n        </div>\n      </div>\n      <div className=\"col-12\">\n        <div className=\"container\">\n          <ImageGrid updateScore={updateScore} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <div className=\"text-center bg-light\">copyright &copy; 2020</div>;\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: {},\n  };\n\n  handleClick = (id) => {\n    if (!this.state.clicked[id]) {\n      this.setState((prevState) => ({\n        score: prevState.score++,\n        clicked: {\n          ...prevState.clicked,\n          [id]: true,\n        },\n      }));\n    } else {\n      this.setState((prevState) => ({\n        score: 0,\n        topScore:\n          this.state.score > this.state.topScore\n            ? this.state.score\n            : this.state.topScore,\n        clicked: {},\n      }));\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid h-100 d-flex flex-column p-0\">\n        <NavBar score={this.state.score} topScore={this.state.topScore} />\n        <Main updateScore={this.handleClick} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}